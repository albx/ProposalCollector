@page "/"
@inject IProposalServices Service
@inject IStringLocalizer<Resources.Pages.Index> Localizer
@inject IJSRuntime Js
@inject ReCaptchaService ReCaptcha 

<PageTitle>@Localizer[nameof(Resources.Pages.Index.PageTitle)]</PageTitle>

<h1>@Localizer[nameof(Resources.Pages.Index.PageTitle)]!</h1>

@if (!string.IsNullOrWhiteSpace(resultMessage))
{
    <div class="row">
        <div role="alert" class="alert col-md-12 alert-dismissible fade show @(isError ? "alert-danger" : "alert-success")">
            @resultMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

<EditForm Model="model" role="form" OnValidSubmit="SubmitProposalAsync">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>@Localizer[nameof(Resources.Pages.Index.NicknameLabel)]</label>
        <InputText @bind-Value="model.AuthorNickname" class="form-control" />
        <ValidationMessage For="@(() => model.AuthorNickname)" />
    </div>

    <div class="form-group">
        <label>@Localizer[nameof(Resources.Pages.Index.TitleLabel)]</label>
        <InputText @bind-Value="model.Title" class="form-control" />
        <ValidationMessage For="@(() => model.Title)" />
    </div>

    <div class="form-group">
        <label>@Localizer[nameof(Resources.Pages.Index.DescriptionLabel)]</label>
        <InputTextArea @bind-Value="model.Description"
                       class="form-control"
                       rows="10"
                       placeholder="@Localizer[nameof(Resources.Pages.Index.DescriptionPlaceholder)]" />
        <ValidationMessage For="@(() => model.Description)" />
    </div>

    <div class="form-group mt-2">
        <div class="col-md-12">
            <button type="button" @onclick="Cancel" class="btn btn-outline-primary">@Localizer[nameof(Resources.Pages.Index.CancelLabel)]</button>
            <button type="submit" class="btn btn-primary">@Localizer[nameof(Resources.Pages.Index.SubmitLabel)]</button>
        </div>
    </div>
</EditForm>

@code {
    private ProposalModel model = new();

    private string resultMessage = "";
    private bool isError = false;

    async Task SubmitProposalAsync()
    {
        try
        {
            var result = await ReCaptcha.VerifyAsync("submit");
            if (!result.Succeeded)
            {
                isError = true;
                resultMessage = result.Error;

                return;
            }

            model.CaptchaResponse = result.Response;

            await Service.SubmitProposalAsync(model);
            resultMessage = Localizer[nameof(Resources.Pages.Index.ProposalSubmittedSuccessfully)];

            model = new();
        }
        catch (Exception ex)
        {
            isError = true;
            resultMessage = ex.Message;

            model = model with { CaptchaResponse = string.Empty };
        }
    }

    void Cancel() => model = new();
}
